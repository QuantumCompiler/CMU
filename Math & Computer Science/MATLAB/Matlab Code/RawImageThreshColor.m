function RawImageThreshColor =  RawImageThreshColor(A,r)

global z M R PR CR

%This program thresholds the color image A at the r percent level.
%A new matrix B is generated by thresholding A. 

%Initialize B
B = A;   

%The following loops perform thresholding on the 
%red, green, and blue layers of A.
%We start by finding the dimensions of A. 

[m,n,k] = size(A);

%First, we work with the red matrix layer of A:
%Initialize the vector x as a column vector of zeros.
x = zeros(m*n,1);

%Overwrite entries of x with redscale entries of A.
%This is done by taking the redscale columns of A and
%inserting them, one after the other, into x.
for j = 1:n
x((j-1)*m+1:j*m) = A(:,j,1);
end

%Threshold x at r percent using the external threshold program. 

N = length(x);
c = x;
threshold(c,r)
ct = z;

%Construct the redscale layer of the 
%thresholded matrix B from the thresholded x. 

for j = 1:n
B(:,j,1) = ct((j-1)*m+1:j*m);
end

%We will need a count of the nonzero entries 
%in order to calculate percent reduction and
%compression ratio. The variables R and M
%come from the threshold program. 
ThresholdRed = R;
NonzerosRed = M;

%Now for the green matrix:
%Re-initialize the vector x as a column vector of zeros.
x = zeros(m*n,1);

%Overwrite entries of x with greenscale entries of A.
%This is done by taking the greenscale columns of A and
%inserting them, one after the other, into x.
for j = 1:n
x((j-1)*m+1:j*m) = A(:,j,2);
end

%Threshold x at r percent using the external threshold program. 
N = length(x);
c = x;
threshold(c,r)
ct = z;

%Construct the greenscale layer of the 
%thresholded matrix B from the thresholded x. 

for j = 1:n
B(:,j,2) = ct((j-1)*m+1:j*m);
end

%We will need a count of the nonzero entries 
%in order to calculate percent reduction and
%compression ratio. The variables R and M
%come from the threshold program. 
ThresholdGreen = R;
NonzerosGreen = M;

%Now for the blue matrix:
%Re-initialize the vector x as a column vector of zeros.
x = zeros(m*n,1);

%Overwrite entries of x with bluescale entries of A.
%This is done by taking the bluescale columns of A and
%inserting them, one after the other, into x.
for j = 1:n
x((j-1)*m+1:j*m) = A(:,j,3);
end

%Threshold x at r percent using the external threshold program. 
N = length(x);
c = x;
threshold(c,r)
ct = z;

%Construct the bluescale layer of the 
%thresholded matrix B from the thresholded x. 

for j = 1:n
B(:,j,3) = ct((j-1)*m+1:j*m);
end

%We will need a count of the nonzero entries 
%in order to calculate percent reduction and
%compression ratio. The variables R and M
%come from the threshold program. 
ThresholdBlue = R;
NonzerosBlue = M;

%The following commands, when not suppressed, report 
%the original and thresholded colorscale matrices.
%This output is helpful for small matrices.  

%Original_Matrix_Red = A(:,:,1)
%Thresholded_Matrix_Red = B(:,:,1)
%Original_Matrix_Green = A(:,:,2)
%Thresholded_Matrix_Green = B(:,:,2)
%Original_Matrix_Blue = A(:,:,3)
%Thresholded_Matrix_Blue = B(:,:,3)

%The following lines report the compression results. 

%Compression is defined as the ratio of the number of 
%nonzero elements in the original matrix to the number of 
%nonzero elements in thresholded matrix.

%Percent reduction is the ratio of the number of 
%nonzero thresholded elements to the number of 
%nonzero original image matrix elements.

ThresholdSum = ThresholdRed + ThresholdGreen + ThresholdBlue;
NonzerosSum = NonzerosRed + NonzerosGreen + NonzerosBlue;
NonzerosThresh =  NonzerosSum - ThresholdSum;

PR = ThresholdSum/NonzerosSum*100;
CR = [NonzerosSum;NonzerosThresh];

Percent_Reduction = ...
sprintf('The percent reduction is %f.',PR)

Compression_Ratio = ...
sprintf('The compression ratio is %d to %d, or %f to %d.',...
CR(1),CR(2), CR(1)/CR(2), 1)

%Now graph the original and compressed images side-by-side for comparison.

figure
subplot(1,2,1), image(A), axis image, title('Original Image') 
subplot(1,2,2), image(B), axis image, title('Compressed Image')

figure
image(A), axis image, title('Original Image') 

figure
image(B), axis image, title('Compressed Image') 

